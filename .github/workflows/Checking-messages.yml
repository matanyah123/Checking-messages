name: Stips Notifications Checker
on:
  workflow_dispatch:

jobs:
  check_stips:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (needed for cache key)
        uses: actions/checkout@v4
        
      - name: Load Previous Count
        id: cache-count
        uses: actions/cache@v4
        with:
          path: last_count.txt
          key: stips-count-${{ github.run_id }}
          restore-keys: |
            stips-count-
            
      - name: Initialize Count File if Missing
        run: |
          if [ ! -f last_count.txt ]; then
            echo "0 0" > last_count.txt
          fi
          
      - name: Read Previous Counts
        id: read-count
        run: |
          read last_messages last_notifications < last_count.txt
          echo "last_messages=$last_messages" >> $GITHUB_ENV
          echo "last_notifications=$last_notifications" >> $GITHUB_ENV
          echo "Previous counts: $last_messages messages, $last_notifications notifications"
          
      - name: Make API Request
        run: |
          echo "Making API request..."
          response=$(curl -s 'https://stips.co.il/api?name=messages.count&api_params=%7B%7D' \
            -H 'Cookie: _ga=GA1.3.547378152.1726079580; _ga_LYRZGGS0YG=GS1.3.1730981977.69.0.1730981977.0.0.0; _gid=GA1.3.1310715032.1730917325; ASPSESSIONIDCERASRCS=KMLNGBEBJPEDBECPHEGEBDAJ; _gat=1; ASPSESSIONIDAETDSRAS=EPFFHLACJMDIICIFJNCHFGKM; Login_User=hashedpassword=EDHJFsGEEKrrpsFHqKprDIoGDIsLIprs&mail=zn6n0Bnu%2ExL%40tznvy%2Ep1z&rememberme=true&stype=75r4&id=GHEFLG&password=;' \
            -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
          
          echo "API Response: $response"
          
          # Check if response is valid JSON
          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response"
            exit 1
          fi
          
          messages_count=$(echo "$response" | jq -r '.data.messagesCount // 0')
          notifications_count=$(echo "$response" | jq -r '.data.notificationsCount // 0')
          
          echo "Current: $messages_count messages, $notifications_count notifications"
          echo "Previous: $last_messages messages, $last_notifications notifications"
          
          # Initialize message variable
          message=""
          
          # Check for new messages (only alert if count increased)
          if [ "$messages_count" -gt "$last_messages" ] && [ "$messages_count" -gt 0 ]; then
            new_messages=$((messages_count - last_messages))
            message="ðŸ“¨ You have $new_messages new message(s)! (Total: $messages_count)"
          fi
          
          # Check for new notifications (only alert if count increased)
          if [ "$notifications_count" -gt "$last_notifications" ] && [ "$notifications_count" -gt 0 ]; then
            new_notifications=$((notifications_count - last_notifications))
            if [ -n "$message" ]; then
              message="$message%0AðŸ”” You have $new_notifications new notification(s)! (Total: $notifications_count)"
            else
              message="ðŸ”” You have $new_notifications new notification(s)! (Total: $notifications_count)"
            fi
          fi
          
          # Send Telegram notification if there are changes
          if [ -n "$message" ]; then
            echo "Sending Telegram notification..."
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "text=$message" \
              -d "parse_mode=HTML"
            
            if [ $? -eq 0 ]; then
              echo "Notification sent successfully"
              # Save new counts to file only after successful notification
              echo "$messages_count $notifications_count" > last_count.txt
            else
              echo "Failed to send notification"
              exit 1
            fi
          else
            echo "No new messages or notifications ðŸ’­"
            # Still update the counts file to avoid false positives
            echo "$messages_count $notifications_count" > last_count.txt
          fi
          
      - name: Update Cache
        if: always()
        uses: actions/cache@v4
        with:
          path: last_count.txt
          key: stips-count-${{ github.run_id }}
